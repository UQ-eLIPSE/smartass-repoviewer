/* Generated By:JJTree&JavaCC: Do not edit this line. TexParser.java */
package au.edu.uq.smartassrepoeditor.templates.texparser;

import au.edu.uq.smartassrepoeditor.engine.Engine;

@SuppressWarnings("unchecked")
public class TexParser/*@bgen(jjtree)*/implements TexParserTreeConstants, TexParserConstants {/*@bgen(jjtree)*/
  protected JJTTexParserState jjtree = new JJTTexParserState();
    Engine engine;

        public SimpleNode parse() throws ParseException {
      SimpleNode n = Template();
      //n.dump("");
      //System.out.println("-------------------------------");
      //System.out.println(n.getCode());
      //System.out.println("-------------------------------");
      return n;
        }

        public void setEngine(Engine engine) {
                this.engine = engine;
        }

  final public SimpleNode Template() throws ParseException {
                         /*@bgen(jjtree) Template */
  ASTTemplate jjtn000 = new ASTTemplate(JJTTEMPLATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AnyText();
      Document();
      AnyText();
      jj_consume_token(0);
                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
                                                                       jjtn000.init(); {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte000;}
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte000;}
                                  }
                                  {if (true) throw (Error)jjte000;}
    } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Document() throws ParseException {
                   /*@bgen(jjtree) Document */
  ASTDocument jjtn000 = new ASTDocument(JJTDOCUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(BEGINDOC);
      AnyText();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case BEGINREPEAT:
        case BEGINMULTI:
        case BEGINSCRIPT:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        Control();
      }
      jj_consume_token(ENDDOC);
    } catch (Throwable jjte000) {
                        if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          {if (true) throw (RuntimeException)jjte000;}
                        }
                        if (jjte000 instanceof ParseException) {
                          {if (true) throw (ParseException)jjte000;}
                        }
                        {if (true) throw (Error)jjte000;}
    } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
    }
  }

  final public void Control() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BEGINREPEAT:
      Repeat();
      break;
    case BEGINMULTI:
      Multi();
      break;
    case 1:
      Call();
      break;
    case 2:
      Section();
      break;
    case BEGINSCRIPT:
      Script();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    AnyText();
  }

  final public void Repeat() throws ParseException {
                 /*@bgen(jjtree) Repeat */
                 ASTRepeat jjtn000 = new ASTRepeat(JJTREPEAT);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(BEGINREPEAT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
        t = jj_consume_token(NUMBER);
        break;
      case INT:
        t = jj_consume_token(INT);
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        jj_consume_token(SPACE);
      }
      jj_consume_token(BREAK);
      AnyText();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case BEGINREPEAT:
        case BEGINMULTI:
        case BEGINSCRIPT:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_3;
        }
        Control();
      }
      jj_consume_token(ENDREPEAT);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.setRepeatsNum(Integer.parseInt(t.image));
    } catch (Throwable jjte000) {
                               if (jjtc000) {
                                 jjtree.clearNodeScope(jjtn000);
                                 jjtc000 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte000 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte000;}
                               }
                               if (jjte000 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte000;}
                               }
                               {if (true) throw (Error)jjte000;}
    } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
    }
  }

  final public void Multi() throws ParseException {
                /*@bgen(jjtree) Multi */
                ASTMulti jjtn000 = new ASTMulti(JJTMULTI);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);Token t = null;
    try {
      jj_consume_token(BEGINMULTI);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NUMBER:
      case INT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case NUMBER:
          t = jj_consume_token(NUMBER);
          break;
        case INT:
          t = jj_consume_token(INT);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_4;
        }
        jj_consume_token(SPACE);
      }
      jj_consume_token(BREAK);
      AnyText();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case 2:
        case BEGINREPEAT:
        case BEGINMULTI:
        case BEGINSCRIPT:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_5;
        }
        Control();
      }
      label_6:
      while (true) {
        jj_consume_token(MULTICHOICE);
                          ASTMultiChoice jjtn001 = new ASTMultiChoice(JJTMULTICHOICE);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
        try {
          AnyText();
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 1:
            case 2:
            case BEGINREPEAT:
            case BEGINMULTI:
            case BEGINSCRIPT:
              ;
              break;
            default:
              jj_la1[9] = jj_gen;
              break label_7;
            }
            Control();
          }
        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULTICHOICE:
          ;
          break;
        default:
          jj_la1[10] = jj_gen;
          break label_6;
        }
      }
      jj_consume_token(ENDMULTI);
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                 if(t!=null) jjtn000.setChoicesCount(Integer.parseInt(t.image));
    } catch (Throwable jjte000) {
                                     if (jjtc000) {
                                       jjtree.clearNodeScope(jjtn000);
                                       jjtc000 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte000 instanceof RuntimeException) {
                                       {if (true) throw (RuntimeException)jjte000;}
                                     }
                                     if (jjte000 instanceof ParseException) {
                                       {if (true) throw (ParseException)jjte000;}
                                     }
                                     {if (true) throw (Error)jjte000;}
    } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
    }
  }

  final public void Call() throws ParseException {
               /*@bgen(jjtree) Call */
               ASTCall jjtn000 = new ASTCall(JJTCALL);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(1);
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[11] = jj_gen;
          break label_8;
        }
        jj_consume_token(SPACE);
      }
      t = jj_consume_token(FILENAME);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[12] = jj_gen;
          break label_9;
        }
        jj_consume_token(SPACE);
      }
      jj_consume_token(BREAK);
                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                    jjtc000 = false;
                                                                                   jjtn000.setFilename(t.image); jjtn000.setEngine(engine);
    } finally {
                             if (jjtc000) {
                               jjtree.closeNodeScope(jjtn000, true);
                             }
    }
  }

  final public void Section() throws ParseException {
                  /*@bgen(jjtree) Section */
                  ASTSection jjtn000 = new ASTSection(JJTSECTION);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(2);
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[13] = jj_gen;
          break label_10;
        }
        jj_consume_token(SPACE);
      }
      t = jj_consume_token(NAME);
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SPACE:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_11;
        }
        jj_consume_token(SPACE);
      }
      jj_consume_token(BREAK);
      AnyText();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case BEGINSCRIPT:
          ;
          break;
        default:
          jj_la1[15] = jj_gen;
          break label_12;
        }
        ScriptAndText();
      }
      jj_consume_token(ENDSECTION);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.setName(t.image);
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ScriptAndText() throws ParseException {
    Script();
    AnyText();
  }

  final public void Script() throws ParseException {
                 /*@bgen(jjtree) Script */
                 ASTScript jjtn000 = new ASTScript(JJTSCRIPT);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);Token t;
    try {
      jj_consume_token(BEGINSCRIPT);
      t = jj_consume_token(ENDSCRIPT);
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
         jjtn000.setText(t.image.substring(0, t.image.length()-2));
    } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
    }
  }

  void AnyText() throws ParseException {
                    /*@bgen(jjtree) AnyText */
   ASTAnyText jjtn000 = new ASTAnyText(JJTANYTEXT);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   try {Token tok;
      String text = "";
      tok = getToken(1);
      while (tok.kind==ANYCHAR || tok.kind==SPACE || tok.kind==NUMBER || tok.kind==BREAK || tok.kind==ALPHA
                        || tok.kind==NAME || tok.kind==INT || tok.kind==FILENAME) {
                text = text + tok.image;
                getNextToken();
                tok = getToken(1);
          }
          jjtn000.setText(text);/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
  }

  public TexParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[16];
  static private int[] jj_la1_0;
  static {
      jj_la1_0();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x114006,0x114006,0x420,0x8,0x114006,0x420,0x420,0x8,0x114006,0x114006,0x20000,0x8,0x8,0x8,0x8,0x100000,};
   }

  public TexParser(java.io.InputStream stream) {
     this(stream, null);
  }
  public TexParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new TexParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public TexParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new TexParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public TexParser(TexParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  public void ReInit(TexParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 16; i++) jj_la1[i] = -1;
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[23];
    for (int i = 0; i < 23; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 16; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 23; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

}
