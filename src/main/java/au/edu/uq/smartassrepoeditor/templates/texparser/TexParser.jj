/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./TexParser.jj */
/*@egen*/options {
    STATIC = false ;              
}

PARSER_BEGIN(TexParser)
package au.edu.uq.smartass.templates.texparser;

import au.edu.uq.smartass.engine.Engine;

public class TexParser/*@bgen(jjtree)*/implements TexParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTTexParserState jjtree = new JJTTexParserState();

/*@egen*/ 
    
    Engine engine;

	public SimpleNode parse() throws ParseException {
      SimpleNode n = Template();
      //n.dump("");
      //System.out.println("-------------------------------");
      //System.out.println(n.getCode());
      //System.out.println("-------------------------------");
      return n;
	}
	
	public void setEngine(Engine engine) {
		this.engine = engine;
	}
}
PARSER_END(TexParser)

SimpleNode Template() : {/*@bgen(jjtree) Template */
  ASTTemplate jjtn000 = new ASTTemplate(JJTTEMPLATE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}    {/*@bgen(jjtree) Template */
                                try {
/*@egen*/ AnyText() Document() AnyText() <EOF>/*@bgen(jjtree)*/
                                                                     {
                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                       jjtc000 = false;
                                                                     }
/*@egen*/ { jjtn000.init(); return jjtn000; }/*@bgen(jjtree)*/
                                } catch (Throwable jjte000) {
                                  if (jjtc000) {
                                    jjtree.clearNodeScope(jjtn000);
                                    jjtc000 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte000 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte000;
                                  }
                                  if (jjte000 instanceof ParseException) {
                                    throw (ParseException)jjte000;
                                  }
                                  throw (Error)jjte000;
                                } finally {
                                  if (jjtc000) {
                                    jjtree.closeNodeScope(jjtn000, true);
                                  }
                                }
/*@egen*/ }

void Document() : {/*@bgen(jjtree) Document */
  ASTDocument jjtn000 = new ASTDocument(JJTDOCUMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) Document */
                      try {
/*@egen*/<BEGINDOC> 
	AnyText() 
	(
		Control()
	) *
	<ENDDOC>/*@bgen(jjtree)*/
                      } catch (Throwable jjte000) {
                        if (jjtc000) {
                          jjtree.clearNodeScope(jjtn000);
                          jjtc000 = false;
                        } else {
                          jjtree.popNode();
                        }
                        if (jjte000 instanceof RuntimeException) {
                          throw (RuntimeException)jjte000;
                        }
                        if (jjte000 instanceof ParseException) {
                          throw (ParseException)jjte000;
                        }
                        throw (Error)jjte000;
                      } finally {
                        if (jjtc000) {
                          jjtree.closeNodeScope(jjtn000, true);
                        }
                      }
/*@egen*/} 

void Control()       : {} { (Repeat() | Multi() | Call() | Section() | Script()) AnyText() }
	  
void Repeat() : {/*@bgen(jjtree) Repeat */
                 ASTRepeat jjtn000 = new ASTRepeat(JJTREPEAT);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Repeat */
                             try {
/*@egen*/ <BEGINREPEAT> ((t = <NUMBER>) | (t = <INT>))  (<SPACE>)* <BREAK>
	AnyText()  ( Control() )* <ENDREPEAT>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{jjtn000.setRepeatsNum(Integer.parseInt(t.image));}/*@bgen(jjtree)*/
                             } catch (Throwable jjte000) {
                               if (jjtc000) {
                                 jjtree.clearNodeScope(jjtn000);
                                 jjtc000 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte000 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte000;
                               }
                               if (jjte000 instanceof ParseException) {
                                 throw (ParseException)jjte000;
                               }
                               throw (Error)jjte000;
                             } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
                             }
/*@egen*/}

void Multi() : {/*@bgen(jjtree) Multi */
                ASTMulti jjtn000 = new ASTMulti(JJTMULTI);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t = null;} {/*@bgen(jjtree) Multi */
                                   try {
/*@egen*/ <BEGINMULTI> [((t = <NUMBER>) | (t = <INT>))] (<SPACE>)* <BREAK> (AnyText() ( Control() )*) 
	( <MULTICHOICE>/*@bgen(jjtree) MultiChoice */
                        {
                          ASTMultiChoice jjtn001 = new ASTMultiChoice(JJTMULTICHOICE);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                        }
                        try {
/*@egen*/ (AnyText() ( Control() )*)/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, true);
                          }
                        }
/*@egen*/)+ <ENDMULTI>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/  
		{if(t!=null) jjtn000.setChoicesCount(Integer.parseInt(t.image));  }/*@bgen(jjtree)*/
                                   } catch (Throwable jjte000) {
                                     if (jjtc000) {
                                       jjtree.clearNodeScope(jjtn000);
                                       jjtc000 = false;
                                     } else {
                                       jjtree.popNode();
                                     }
                                     if (jjte000 instanceof RuntimeException) {
                                       throw (RuntimeException)jjte000;
                                     }
                                     if (jjte000 instanceof ParseException) {
                                       throw (ParseException)jjte000;
                                     }
                                     throw (Error)jjte000;
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/}

void Call() : {/*@bgen(jjtree) Call */
               ASTCall jjtn000 = new ASTCall(JJTCALL);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Call */
                           try {
/*@egen*/ "%%CALL" (<SPACE>)* t = <FILENAME> (<SPACE>)* <BREAK>/*@bgen(jjtree)*/
                                                                                  {
                                                                                    jjtree.closeNodeScope(jjtn000, true);
                                                                                    jjtc000 = false;
                                                                                  }
/*@egen*/  {jjtn000.setFilename(t.image); jjtn000.setEngine(engine); }/*@bgen(jjtree)*/
                           } finally {
                             if (jjtc000) {
                               jjtree.closeNodeScope(jjtn000, true);
                             }
                           }
/*@egen*/ }

void Section() : {/*@bgen(jjtree) Section */
                  ASTSection jjtn000 = new ASTSection(JJTSECTION);
                  boolean jjtc000 = true;
                  jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Section */
        try {
/*@egen*/
	"%%BEGIN" (<SPACE>)* t=<NAME> (<SPACE>)* <BREAK>
		AnyText() ( ScriptAndText() ) * 
	<ENDSECTION>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{jjtn000.setName(t.image);}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ 
	}

void ScriptAndText()       : {} { Script() AnyText() }

void Script() : {/*@bgen(jjtree) Script */
                 ASTScript jjtn000 = new ASTScript(JJTSCRIPT);
                 boolean jjtc000 = true;
                 jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;} {/*@bgen(jjtree) Script */
                             try {
/*@egen*/ <BEGINSCRIPT> t = <ENDSCRIPT>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
	{jjtn000.setText(t.image.substring(0, t.image.length()-2));}/*@bgen(jjtree)*/
                             } finally {
                               if (jjtc000) {
                                 jjtree.closeNodeScope(jjtn000, true);
                               }
                             }
/*@egen*/ } 

JAVACODE
    void AnyText() {/*@bgen(jjtree) AnyText */
   ASTAnyText jjtn000 = new ASTAnyText(JJTANYTEXT);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   try {
/*@egen*/
      Token tok;
      String text = "";
      tok = getToken(1);
      while (tok.kind==ANYCHAR || tok.kind==SPACE || tok.kind==NUMBER || tok.kind==BREAK || tok.kind==ALPHA 
      			|| tok.kind==NAME || tok.kind==INT || tok.kind==FILENAME) {
        	text = text + tok.image;
	        getNextToken();
	        tok = getToken(1);
	  }
	  jjtn000.setText(text);/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
    }

TOKEN : { < SPACE : " " | "\t" > }
TOKEN : { < BREAK : "\n" | "\r" | "\r\n"> }
TOKEN : { < NUMBER : ["0" - "9"] > }
TOKEN : { < #ALPHA : ["a" - "z"] | ["A" - "Z"] > }
TOKEN : { < #FILEDELIMITER : "/" > }
TOKEN : { < ANYCHAR : ~[] > }
TOKEN : { < NAME : <ALPHA> (<ALPHA> | <NUMBER> | "_")* > }
TOKEN : { < INT : <NUMBER> ( <NUMBER> )* > }
TOKEN : { < FILENAME : (<ALPHA> | <NUMBER> | "_" | "." | "-")+ (<FILEDELIMITER> (<ALPHA> | <NUMBER> | "_" | "." | "-")+)* > }

TOKEN : { < BEGINDOC : "\\begin{document}" > } 
TOKEN : { < ENDDOC : "\\end{document}" > }
TOKEN : { < BEGINREPEAT : "%%REPEAT" (<SPACE>)* > }
TOKEN : { < ENDREPEAT : "%%ENDREPEAT" (<SPACE>)* <BREAK> > }

TOKEN : { < BEGINMULTI : "%%MULTI"  (<SPACE>)* > }
TOKEN : { < MULTICHOICE : "%%CHOICE" (<SPACE>)* <BREAK> > }
TOKEN : { < ENDMULTI : "%%ENDMULTI" (<SPACE>)* <BREAK> > }
/*TOKEN : { < CALL : "%%CALL" (<SPACE>)* (<ALPHA> | <NUMBER> | "_" | "." | "-")+ (<SPACE>)* <BREAK> > }*/

/*TOKEN : { < BEGINSECTION : "%%BEGIN" (<SPACE>)* <NAME> (<SPACE>)* <BREAK> > }*/
TOKEN : { < ENDSECTION : "%%END" (<SPACE>)+ (<NAME>)? (<SPACE>)* <BREAK> > }

TOKEN : { < BEGINSCRIPT : "#<" > : SCRIPT }
<SCRIPT> TOKEN : { < ENDSCRIPT : "#>" > : DEFAULT }
<SCRIPT> MORE : {<~[]>}

